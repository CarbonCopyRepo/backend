name: CarbonCopy Node.js Backend - CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Jest_Unit_Tests:
    name: Run Jest Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 20.9.0
      - name: Installing dependencies
        run: npm ci
      - name: Executing tests
        run: npm test

  Build_and_Push_to_GCR:
    name: Build Docker Image and upload to GCR
    runs-on: ubuntu-latest
    needs: Jest_Unit_Tests
    timeout-minutes: 20
    env:
      IMAGE_NAME: carboncopy-backend
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GEOCODE_API_KEY: ${{ secrets.GEOCODE_API_KEY }}
      HERE_API_KEY: ${{ secrets.HERE_API_KEY }}
      CONNECTION_NAME: ${{ secrets.CONNECTION_NAME }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet

      - name: Build the docker image
        run: docker build \
          --build-arg GEOCODE_API_KEY=${{ env.GEOCODE_API_KEY }} \
          --build-arg HERE_API_KEY=${{ env.HERE_API_KEY }} \
          --build-arg CONNECTION_NAME=${{ env.CONNECTION_NAME }} \
          --build-arg DB_NAME=${{ env.DB_NAME }} \
          --build-arg DB_USER=${{ env.DB_USER }} \
          --build-arg DB_PASSWORD=${{ env.DB_PASSWORD }} \
          . -t gcr.io/${{ env.GCP_PROJECT_ID }}/$IMAGE_NAME

      - name: Push the docker image to Container Registry (GCR)
        run: docker push gcr.io/${{ env.GCP_PROJECT_ID }}/$IMAGE_NAME:latest

  Deploy_to_GKE_on_GCP:
    name: Provision GKE resources on GCP with Terraform
    runs-on: ubuntu-latest
    needs: Build_and_Push_to_GCR
    timeout-minutes: 40
    env:
      TF_VAR_gcp_terraform_sa: ${{ secrets.GCP_TERRAFORM_SA }}
      TF_VAR_geocode_api_key: ${{ secrets.GEOCODE_API_KEY }}
      TF_VAR_here_api_key: ${{ secrets.HERE_API_KEY }}
      TF_VAR_connection_name: ${{ secrets.CONNECTION_NAME }}
      TF_VAR_db_name: ${{ secrets.DB_NAME }}
      TF_VAR_db_user: ${{ secrets.DB_USER }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@v2
        with:
           service_account_key: ${{ secrets.GCP_TERRAFORM_SA }}
           project_id: ${{ env.PROJECT_ID }}
           export_default_credentials: true

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SA }}

      - name: Setup Hashicorp Terraform Provider
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init -var-file="./variables.tfvars"
        working-directory: terraform

      - name: Validate Terraform Scripts and Config
        run: terraform validate
        working-directory: terraform

      - name: Apply Terraform Config to GKE on GCP
        run: terraform apply -auto-approve -var-file="./variables.tfvars"
        working-directory: terraform
